Protokół Diffiego- Hellmana dla dwóch uczestników
#LAB1a



#procedura generująca p,n,g
#wejscie:
#b-długosc charekterystyki ciala p wyrazona w bitach
#wyjscie:
#p-charakterystyka p ciala Fp 
#g-generator
#n-najmniejsza liczba naturalna dla ktore g^n=1(mod p)


def generacja(b):
    p = previous_prime(2^b)
    while not is_prime((p-1)//2):
        p = previous_prime(p)
    n = (p-1) // 2
    F = GF(p)
    while True:
        g= F.random_element()
        if g.multiplicative_order()==n:
            break
    return p,n,g
    


#procedura generujaca klucze: prywatny i publiczny
#wejscie:
#p-charakterystyka p ciala Fp 
#g-generator podgrupy cyklicznej rzedu n
#n-rzad podgrupy cyklicznej
#wyjscie:
#kpriv-klucz prywatny dla danej strony
#kpub-klucz publiczny dla danej strony

def generacja_kluczy(p,n,g):
    kpriv=randint(1,n-1)
    kpub= (g^kpriv)%p
    return kpriv,kpub


#procedura obliczająca secret
#wejscie: 
#kpub-klucz publiczny dla jednej ze stron
#kpriv-klucz prywatny dla drugiej ze stron
#p-charakterystyka p ciala Fp 
#wyjscie:
#s-obliczny secret

def oblicz_secret(kpub,kpriv,p):
    s = (kpub^kpriv)%p
    return s

#Procedura dla KROKU pierwszego
#wykorzystujemy funkcje generacja_kluczy dla wygenerowania kluczy publicznego i prywatnego
#wejscie
#p-charakterystyka p ciala Fp 
#g-generator podgrupy cyklicznej rzedu n
#n-rzad podgrupy cyklicznej
#wyjscie
#priv_a-klucz prywatny a
#pub_a-klucz publiczny a

def krok_pierwszy(p,n,g):
    priv_a,pub_a=generacja_kluczy(p,n,g)
    return priv_a,pub_a

#Procedura dla KROKU drugiego
#wykorzystujemy funkcje generacja_kluczy dla wygenerowania kluczy publicznego i prywatnego
#wejscie
#p-charakterystyka p ciala Fp 
#g-generator podgrupy cyklicznej rzedu n
#n-rzad podgrupy cyklicznej
#wyjscie
#priv_b-klucz prywatny b
#pub_b-klucz publiczny b

def krok_drugi(p,n,g):
    priv_b,pub_b=generacja_kluczy(p,n,g)
    return priv_b,pub_b


#Procedura dla KROKU trzeciego
#ma na celu obliczenie wspolnej sekretnej wartosci
#wejscie:
#pub_b-klucz publiczny b
#priv_a-klucz prywatny a
#p-charakterystyka p ciala Fp
#wyjscie
#s- klucz tajny
def krok_trzeci(pub_b,priv_a,p):
    s=oblicz_secret(pub_b,priv_a,p)
    return s


#Procedura dla KROKU czwartego
#ma na celu obliczenie wspolnej sekretnej wartosci
#wejscie:
#pub_a-klucz publiczny a
#priv_b-klucz prywatny b
#p-ustalonaliczba pierwsza
#wyjscie
#s- klucz tajny
def krok_czwarty(pub_a,priv_b,p):
    s=oblicz_secret(pub_a,priv_b,p)
    return s

#Procedura dla KROKU piatego
#procedura ma na celu sprawdzic czy obie wartosci klucza tajnego sa takie same
#wejscie
#s1- sekretna wartosc jednej ze stron
#s2-sekretna wartosc drugiej strony
def krok_piaty(s1,s2):
    if(s1==s2):
        print("s zostalo poprawnie wyliczone")
    else:
        print("cos poszlo nie tak...")


        
p,n,g= generacja(128)
print("p:",p)
print("n:",n)
print("g:",g)
#krok 1
priv_a,pub_a=krok_pierwszy(p,n,g)
print("Klucz prywatny a :",priv_a,"Klucz publiczny a :",pub_a)
#krok 2
priv_b,pub_b=krok_drugi(p,n,g)
print("Klucz prywatny b :",priv_b,"Klucz publiczny b :",pub_b)
#krok 3
secret_a=krok_trzeci(pub_b,priv_a,p)
print("Secret strony a:",secret_a)
#krok 4
secret_b=krok_czwarty(pub_a,priv_b,p)
print("Secret strony b:",secret_b)
#krok 5
krok_piaty(secret_a,secret_b)